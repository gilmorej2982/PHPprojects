<?php require 'scripts/remove-magic-quotes.php'; ?> <!-- magic quotes are deprecated so you don't want to use them.  Instead it is going to be done with a mysqli command --><!DOCTYPE html><html lang="en"><head><meta charset="utf-8" /><title>Retrieving Data from Databases</title><style type="text/css">body {	font-family: courier, monospace;	color:#FF6633;	}	.instructions {	color: #666666;	font-family: georgia, serif;	}code {	color: #444;	font-weight: bold;	font-size: 1.1em;}</style></head><body><header><h1 class="instructions">Retrieving Data from Databases</h1></header><article><h2 class="instructions">First, send data to a new database table called "comments"</h2><p class="instructions"><a href="comment-form.php">Return to form</a></p><p class="instructions">These are the steps you need to do to retrieve the data from the $_POST superglobal array and put that data into the database. Of course, you need to have created the database using phpMyAdmin first, and remember your username and password.</p><ol class="instructions"><li>create a new database table in your "php_class" database. You need 5 fields: <code>first_name, last_name, comments, php_day, id</code>. You don't need a new user.</li><li>define variables for the data collected from the form, including hidden form field.</li><li>variable to connect to the database</li><li>variable to insert data into database</li><li>variable to query the database</li><li>variable to disconnect from the database</li></ol><p class="instructions">It is easier to do these in steps. Write a script that assigns each piece of data from the form to an appropriate variable (step 1). Output each variable on its own line so you can see that it is working. "Require" the anti-magic-quotes script above the doctype declaration.</p><p class="instructions">Use the <code>mysqli_real_escape_string()</code> to escape characters, and <code>trim()</code> to eliminate leading and/or trailing spaces. For <code>mysqli_real_escape_string()</code> to work, though, you need to have your connection set up because that is one of the parameters of the function. You don't need to "sanitize" your php_day variable, because that is coming straight from a php script and you know it is fine.</p><!-- write your form variable script here with the required "sanitizing"; add conditional statement described below once it is working --><?php$first_name = $_POST['firstname'];$last_name = $_POST['lastname'];$comments = $_POST['comments'];$phpday = $_POST['phpday'];echo "$first_name $last_name $comments $phpday"; //this is just to see if it is working$connect = mysqli_connect('localhost', 'Jessica', 'J1u2n3e4', 'php_class')	or die('problem connecting to database');$first_name = mysqli_real_escape_string($connect, $first_name); //This is what you are going to use instead of the magic quote thing$last_name = mysqli_real_escape_string($connect, $last_name);$comments = mysqli_real_escape_string($connect, $comments);if (!empty($first_name) && !empty($last_name) && !empty($comments)) {$query = "INSERT INTO comments(first_name, last_name, comments, phpday)"."VALUES('$first_name', '$last_name', '$comments', '$phpday')";$result = mysqli_query($connect, $query)	or die('problem querying database');} else {	echo 'Please fully complete the form.';}mysql_close();?><h4 class="instructions">Check your database table "comments" to confirm your script is working.</h4><h2 class="instructions">What happens if someone submits a form without filling it out?</h2><p class="instructions">You need to write a conditional statement that checks to see if the form has been filled out. We're not going to do on-page validation, but rather set up a script that won't send anything to the database if the form fields are empty. Use an if statement, with the <code>empty()</code> function and the <code>&&</code> characters in the conditional expression, to check to see if the fields are NOT empty. If they are NOT empty, then connect to the db and send the query.</p><p class="instructions">Submit an empty or incomplete form a few times, and check to see that your database isn't getting the data. You don't want partial data.</p> <h2 class="instructions">Now let's retrieve data from "comments"</h2><ol class="instructions"><li>copy your <code>$connect</code> variable for re-use</li><li>set up a new query to fetch data from the database.</li><li>you'll need the <code>SELECT * FROM</code> SQL command to get the data out of the database table in question.</li><li>your <code>$result</code> is a "result resource" - sort of like an array - and we'll need a loop to use that data. The next section will deal with that.</li></ol><!-- write your new query here --><?php$connect = mysqli_connect('localhost', 'Jessica', 'J1u2n3e4', 'php_class')	or die('error connecting to database');$query = "SELECT * FROM comments";$result = mysqli_query($connect, $query)	or die ('error querying database');while ($row = mysqli_fetch_array($result)){	echo $row['first_name'].' '.$row['last_name'].' '.$row['comments'].' '.$row['phpday'].'<br />';	}?><h2 class="instructions">Let's use the result resource.</h2><ol class="instructions"><li>first, use a <code>while</code> loop to print each row from the database on a line, with a space between each of the entries (first name, last name, comments, php day). Remember that you need to use <code>mysqli_fetch_array($result)</code> to convert your result resource into an array, and therefore make it useable. Use a variable you call <code>$row</code> to hold the value of that array. Now that the result resource is an array, you ask for each of the database fields by their name as a key <code>$array['key']</code> (your array is called "row").</li></ol><!-- write your first while loop here --><ol class="instructions" start="2"><li>now, use a <code>while</code> loop to create a table that populates itself with rows of information. You'll need to hardcode in the beginning and end of the table outside of the loop, including table headers (th) to identify the columns of data. You'll need to send the query again because you've used the result (copy and paste it from the first script into the second script).</li></ol><!-- hardcode beginning/end of table and the loop to print the database contents inside the table; look at powerpoint to see how to efficiently break up your script. --><?php$connect = mysqli_connect('localhost', 'Jessica', 'J1u2n3e4', 'php_class')	or die('error connecting to database');$query = "SELECT * FROM comments";$result = mysqli_query($connect, $query)	or die ('error querying database');?><table border="1"><tr>	<th>First Name</th>	<th>Last Name</th>	<th>Comments</th>	<th>Day Comment Submitted</th></tr>	<?php	while ($row = mysqli_fetch_array($result)) { ?>	<tr>		<td>			<?php echo $row['first_name']; ?>		</td>		<td>			<?php echo $row['last_name']; ?>		</td>		<td>			<?php echo $row['comments']; ?>		</td>		<td>			<?php echo $row['phpday']; ?>		</td>	</tr>	<?php } ?></table><h2 class="instructions">What if you only want the first names in a strings?</h2><ol class="instructions"><li>set up a new query to fetch data from the database table (<code>SELECT * FROM comments</code>)</li><li>if you want, you can ask for only the first_name data (<code>SELECT first_name FROM comments</code>)<li>if you want to use the first names in a string, you need to "push" them into an array. Set up a variable to hold them (let's call it "first_names"), and set its value as array() like this: <code>$first_names = array()</code></li><li>Then, in the <code>while</code> loop, use <code>array_push()</code> to put all the first names into an array. <code>implode()</code> will turn them into a string with the separator of your choice!</li><li>print your first names string to the page.</li></ol><!-- write your new query here with loop to push the first names into an array, then implode them, then print to the page. --><?php$first_names = array();$connect = mysqli_connect('localhost', 'Jessica', 'J1u2n3e4', 'php_class')	or die('error connecting to database');$query = "SELECT * FROM comments";$result = mysqli_query($connect, $query)	or die ('error querying database');while ($row = mysqli_fetch_array($result)) {	array_push($first_names, $row['first_name']);}$first_names = implode(', ', $first_names);echo $first_names;?></article></body></html>